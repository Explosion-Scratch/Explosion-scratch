on:
  push:
  workflow_dispatch:
  schedule:
    - cron: "*/6 * * * *"

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
         ref: ${{ github.head_ref }}
      - run: npm i isomorphic-fetch showdown markdown-escape bijou.js
      - uses: actions/github-script@v4
        id: step
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const _$ = require("bijou.js")
            require("isomorphic-fetch");
            const fs = require("fs")
            var escape = require('markdown-escape')
            const showdown = require("showdown");
            let r = await fetch("https://api.github.com/users/explosion-scratch/events").then((res) => res.json());
            r = r
              .map((i) => {
                if (i.type === "PushEvent") {
                  return `- ${f(i)} – [\`${i.payload.commits[0].sha.slice(0,7)}\`](https://github.com/${
                    i.repo.name
                  }/commit/${i.payload.commits[0].sha})– ${
                    escape(i.payload.commits[0].message.split("\n")[0])
                  } ([${i.repo.name}](https://github.com/${i.repo.name}))`;
                }
                if (i.type === "IssueCommentEvent" && i.payload.action === "created") {
                  return `- ${f(i)} – Commented in [${i.repo.name}](${
                    i.payload.comment.html_url
                  })<blockquote>${clip(i.payload.comment.body)}</blockquote>`;
                }
                if (i.type === "PullRequestEvent") {
                  let act;
                  if (i.payload.pull_request.merged_by) {
                    act =
                      i.payload.pull_request.merged_by.login === "Explosion-Scratch" &&
                      i.payload.pull_request.merged_at.slice(0, 16) ===
                        i.created_at.slice(0, 16)
                        ? "Merged"
                        : i.payload.action;
                  } else {
                    act = i.payload.action;
                  }
                  return `- ${f(i)} – ${act} a [pull request](${i.payload.pull_request.html_url}) in [${i.repo.name}](https://github.com/${i.repo.name})`;
                }
              })
              .join("\n");
            var converter = new showdown.Converter();
            let out =  converter.makeHtml(r);
            fs.writeFileSync('./test.md', `\n<details><summary>Show activity!</summary>\n${out}\n</details>\n`);
            return out;
            function clip(str, length = 150){
              let e = str.slice(0, length);
              e += e.length == length ? "..." : "";
              return e.replace(/<(.|\n)*?>/g, "").replace(/\W+/g, " ");
            }
            function f(i){
              let diff = Date.now() - (new Date(i.created_at)).getTime();
              diff = diff / 60000;
              diff = Math.round(diff);
              diff = diff * 60000;
              if (!_$.formatMilliseconds(diff)) return "Just now"
              return _$.formatMilliseconds(diff) + " ago"
            }
          result-encoding: string
      - name: cat end.md and start.md
        run: cat start.md test.md > README.md
      - name: remove end.md
        run: rm -f test.md
      - run: rm -rf node_modules
      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Autogenerate activity
